#############################################################################
#
# Configuration file for installing ILC Software release v01-14
#
# This cfg file assumes the base-level tools from release_v01-14-base.cfg
# are already installed and available in your system (base-level tools are the
# tools which are set as 'ilcsoft.link' at the end of this file
#
# If you do not have this tools available on your system you can install them
# with the configuration file release_v01-14-base.cfg or alternatively
# install all software with release_v01-14-scratch.cfg (please check
# release_v01-14-base.cfg for more details)
#
# Please do not forget to modify the directories in this cfg file
# according to your system !!
#
# Author: F. Gaede, J. Engels, DESY
# Date: Jun 30, 2010
#
##############################################################################

import os, sys

# read package versions from external file
path_where_this_file_lives = os.path.dirname( config_file )
versions_file = os.path.join( path_where_this_file_lives, "release-versions-HEAD.py" )
execfile( versions_file )

ilcsoft_install_dir = ilcsoft_install_prefix
ilcsoft = ILCSoft( ilcsoft_install_dir )


if not 'ilcPath' in dir():
    "raise ilcPath not set"

ilcPath = os.path.normpath( ilcPath ) + '/' # make sure there it ends with /

# global options
ilcsoft.env["MAKEOPTS"]="-j6"
ilcsoft.env["CXX"]="g++"
ilcsoft.env["CC"]="gcc"

#
#ilcsoft.envcmake['CMAKE_CXX_FLAGS']= CMAKE_CXX_FLAGS
ilcsoft.envcmake['USE_CXX11']=use_cpp11
ilcsoft.envcmake["Boost_NO_BOOST_CMAKE"] = 'ON'
#

# ----- build and install documentation -------------
ilcsoft.envcmake["INSTALL_DOC"]="ON"


#ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "Debug"
ilcsoft.envcmake["CMAKE_BUILD_TYPE"]= "RelWithDebInfo"
ilcsoft.downloadType = "GitHub"
#ilcsoft.downloadType = "svn-desy"



###########################################################

ilcsoft.install( LCCD( LCCD_version ))

ilcsoft.install( Marlin( Marlin_version ))
ilcsoft.module("Marlin").envcmake["MARLIN_GUI"]='ON'

ilcsoft.install( MarlinPKG( "MarlinDD4hep", MarlinDD4hep_version ))
ilcsoft.module("MarlinDD4hep").addDependency( [ 'Marlin', 'DD4hep', 'Root', 'DDKalTest'] )

ilcsoft.install( MarlinPKG( "DDMarlinPandora", DDMarlinPandora_version ))
ilcsoft.module("DDMarlinPandora").addDependency( [ 'Marlin', 'MarlinUtil', 'DD4hep', 'ROOT', 'PandoraPFANew', 'MarlinTrk'] )
ilcsoft.module("DDMarlinPandora").envcmake["CMAKE_CXX_FLAGS"]='-Wno-error'


ilcsoft.install( MarlinUtil( MarlinUtil_version ))


#----------  standard reco packages

ilcsoft.install( MarlinReco( MarlinReco_version ))
ilcsoft.module("MarlinReco").envcmake["MARLINRECO_FORTRAN"]='OFF'
ilcsoft.module("MarlinReco").addDependency( [ 'Marlin', 'MarlinUtil', 'MarlinKinFit', 'DD4hep', 'ROOT', 'AIDA'] )

ilcsoft.install( PandoraAnalysis( PandoraAnalysis_version ))

ilcsoft.install( PandoraPFANew( PandoraPFANew_version ))

ilcsoft.module("PandoraPFANew").envcmake["PANDORA_MONITORING"]='ON'
ilcsoft.module("PandoraPFANew").envcmake["LC_PANDORA_CONTENT"]='ON'
ilcsoft.module("PandoraPFANew").envcmake["EXAMPLE_PANDORA_CONTENT"]='ON'
ilcsoft.module("PandoraPFANew").envcmake["ROOT_DIR"]='${ROOTSYS}/etc/cmake'
ilcsoft.module("PandoraPFANew").envcmake["CMAKE_CXX_FLAGS"]='-Wno-error -std=c++11'


ilcsoft.install( MarlinPandora( MarlinPandora_version ))
ilcsoft.module("MarlinPandora").envcmake["CMAKE_CXX_FLAGS"]='-Wno-error -std=c++11'


ilcsoft.install( LCFIVertex( LCFIVertex_version ))
ilcsoft.module( "LCFIVertex" ).envcmake["BOOST_ROOT"] = Boost_path

ilcsoft.install( MarlinPKG( "LCFIPlus", LCFIPlus_version ))
ilcsoft.module("LCFIPlus").download.type="GitHub"
ilcsoft.module("LCFIPlus").download.gituser="lcfiplus"
ilcsoft.module("LCFIPlus").download.gitrepo="LCFIPlus"
ilcsoft.module("LCFIPlus").addDependency( [ 'LCIO', 'GEAR', 'ROOT', 'Marlin', 'MarlinUtil', 'LCFIVertex'] )
ilcsoft.install( CEDViewer( CEDViewer_version ))

ilcsoft.install( Overlay( Overlay_version ))

ilcsoft.install( MarlinPKG( "MarlinFastJet", MarlinFastJet_version ))
ilcsoft.module("MarlinFastJet").addDependency( [ 'LCIO', 'Marlin', 'FastJet'] )

ilcsoft.install( MarlinPKG( "LCTuple", LCTuple_version ))
ilcsoft.module("LCTuple").addDependency( [ 'LCIO', 'Marlin', 'ROOT'] )

ilcsoft.install( MarlinPKG( "MarlinKinfit", MarlinKinfit_version ))
ilcsoft.module("MarlinKinfit").addDependency( [ 'LCIO', 'GEAR', 'GSL', 'Marlin'] )

ilcsoft.install( MarlinTrk( MarlinTrk_version ))
ilcsoft.install( KiTrack( KiTrack_version ))
ilcsoft.install( KiTrackMarlin( KiTrackMarlin_version ))

ilcsoft.install( MarlinPKG( "MarlinTrkProcessors", MarlinTrkProcessors_version ))
ilcsoft.module("MarlinTrkProcessors").addDependency( [ 'LCIO', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'KalTest', 'KalDet', 'MarlinTrk', 'KiTrack', 'KiTrackMarlin'] )

ilcsoft.install( MarlinPKG( "MarlinKinfitProcessors", MarlinKinfitProcessors_version ))
ilcsoft.module("MarlinKinfitProcessors").addDependency( [ 'LCIO', 'GEAR', 'GSL', 'Marlin'] )

ilcsoft.install( MarlinPKG( "ILDPerformance", ILDPerformance_version ))
ilcsoft.module("ILDPerformance").addDependency( [ 'Marlin', 'MarlinUtil', 'ROOT'] )

#-- for convenience also include the HEAD version of ILDconfig
ilcsoft.install( ConfigPKG( "ILDConfig", ILDConfig_version ))
ilcsoft.module("ILDConfig").addDependency( [ 'Marlin', 'MarlinUtil', 'ROOT'] )

ilcsoft.install( MarlinPKG( "Clupatra", Clupatra_version ))
ilcsoft.module("Clupatra").addDependency( [ 'LCIO', 'ROOT', 'RAIDA', 'Marlin', 'MarlinUtil', 'KalTest', 'MarlinTrk' ] )

ilcsoft.install( MarlinPKG( "ClicPerformance", ClicPerformance_version ))
ilcsoft.module("ClicPerformance").addDependency( [ 'Marlin', 'MarlinUtil', 'ROOT', 'MarlinTrk', 'AIDA', 'DD4hep', 'lcgeo'] )

ilcsoft.install( MarlinPKG( "ConformalTracking", ConformalTracking_version ))
ilcsoft.module("ConformalTracking").addDependency( [ 'Marlin', 'MarlinUtil', 'ROOT', 'MarlinTrk', 'AIDA', 'DD4hep'] )

ilcsoft.install( MarlinPKG( "Physsim", Physsim_version ))
ilcsoft.module("Physsim").addDependency( [ 'LCIO', 'ROOT', 'Marlin' ] )

ilcsoft.install( MarlinPKG( "FCalClusterer", FCalClusterer_version ))
ilcsoft.module("FCalClusterer").download.type="GitHub"
ilcsoft.module("FCalClusterer").download.gituser="FCALSW"
ilcsoft.module("FCalClusterer").download.gitrepo="FCalClusterer"
ilcsoft.module("FCalClusterer").addDependency( [ 'DD4hep', 'LCIO', 'ROOT', 'GSL', 'Marlin' ] )

ilcsoft.install( MarlinPKG( "ForwardTracking", ForwardTracking_version ))
ilcsoft.module("ForwardTracking").addDependency( [ 'LCIO', 'GEAR', 'ROOT', 'GSL', 'Marlin', 'MarlinUtil', 'MarlinTrk'] )


ilcsoft.install( MarlinPKG( "ConformalTracking", ConformalTracking_version ))
ilcsoft.module("ConformalTracking").addDependency( [ 'LCIO', 'ROOT', 'Marlin', 'MarlinTrk'] )


ilcsoft.install( MarlinPKG( "LICH", LICH_version ))
ilcsoft.module("LICH").download.type="GitHub"
ilcsoft.module("LICH").download.gituser="danerdaner"
ilcsoft.module("LICH").download.gitrepo="LICH"
ilcsoft.module("LICH").addDependency( [ 'LCIO', 'ROOT', 'Marlin', 'MarlinUtil' ] )


#---------test beam packages

#ilcsoft.install( Eutelescope( Eutelescope_version ))
#ilcsoft.module("Eutelescope").env['EUDAQ_VERSION']='trunk'
#ilcsoft.module("Eutelescope").env['MILLEPEDEII_VERSION']='trunk'


ilcsoft.install( PathFinder( PathFinder_version ))
ilcsoft.module("PathFinder").download.type="svn"

ilcsoft.install( MarlinTPC( MarlinTPC_version ))
ilcsoft.module("MarlinTPC").download.type="svn"
ilcsoft.module("MarlinTPC").envcmake['INSTALL_DOC']='OFF'


ilcsoft.install( BBQ( BBQ_version ))
ilcsoft.module("BBQ").download.type="svn"

#fg: needs porting to ROOT6 (dictionary!)
#ilcsoft.install( Druid( Druid_version ))

ilcsoft.install( Garlic( Garlic_version ))
ilcsoft.module("Garlic").download.type="svn"



ilcsoft.install( RAIDA( RAIDA_version ))

ilcsoft.install( KalTest( KalTest_version ))
ilcsoft.install( KalDet( KalDet_version ))

ilcsoft.install( GBL ( GBL_version ) )

ilcsoft.link( XercesC( ilcPath + "xercesc/" + XercesC_version ))


# DD4hep
ilcsoft.install( DD4hep( DD4hep_version ))
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_GEANT4"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_LCIO"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_XERCESC"]=0
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_PYROOT"]=0
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_GEAR"]=1
ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_BOOST"]=1
ilcsoft.module("DD4hep").envcmake["BOOST_ROOT"] = Boost_path
if( use_cpp11 ):
    ilcsoft.module("DD4hep").envcmake["DD4HEP_USE_CXX11"] = 'ON'


ilcsoft.install( lcgeo( lcgeo_version ))

ilcsoft.install( aidaTT( aidaTT_version ))
ilcsoft.module("aidaTT").download.type="GitHub"
ilcsoft.module("aidaTT").download.gituser="AIDASoft"
ilcsoft.module("aidaTT").download.gitrepo="aidaTT"

ilcsoft.install( DDKalTest( DDKalTest_version ))

ilcsoft.install( DD4hepExamples ( DD4hepExamples_version ))



ilcsoft.link( CED( ilcPath + "CED/" + CED_version ))

#ilcsoft.link( LCIO( ilcPath + "lcio/" + LCIO_version ))
ilcsoft.install( LCIO( LCIO_version ))

#----- this will build the optional ROOT dictionary for LCIO -----
#------ set to OFF  if you don't want it
if( use_cpp11 ):
    ilcsoft.module("LCIO").envcmake['BUILD_ROOTDICT']='ON'
#ilcsoft.module("LCIO").envcmake['INSTALL_DOC']='OFF'
#ilcsoft.module("LCIO").envcmake['ROOT_HOME']='${ROOTSYS}'
#ilcsoft.module("LCIO").envcmake["BUILD_WITH_DCAP"]="ON"
# it is recommended to use the LD_PRELOAD mechanism for opening lcio files in dCache
#ilcsoft.link( dcap( ilcPath + "dcap/" + dcap_version ))

#ilcsoft.link( GEAR( ilcPath + "gear/" + GEAR_version ))
ilcsoft.install( GEAR( GEAR_version ))
ilcsoft.module("GEAR").envcmake['GEAR_TGEO']='ON'


ilcsoft.link( FastJet( ilcPath + "FastJet/" + FastJet_version ))

ilcsoft.link( ROOT( ilcPath + "root/" + ROOT_version ))

ilcsoft.link( CLHEP( ilcPath + "CLHEP/" + CLHEP_version ))
ilcsoft.link( GSL( ilcPath + "gsl/" + GSL_version ))
ilcsoft.link( QT( ilcPath + "QT/" + QT_version ))
ilcsoft.link( Geant4( ilcPath + "geant4/" + Geant4_version ))

ilcsoft.link( CondDBMySQL( ilcPath + "CondDBMySQL/" + CondDBMySQL_version ))

# mysql
if 'MySQL_path' in dir():
    ilcsoft.link( MySQL( MySQL_path ))

# cmake
ilcsoft.use( CMake( ilcPath + "CMake/" + CMake_version ))

ilcsoft.link( ILCUTIL( ilcPath + "ilcutil/" + ILCUTIL_version ))


# use pe-installed boost
if 'Boost_path' in dir():
   ilcsoft.use( Boost( Boost_path ) )

# use pe-installed eigen
if 'Eigen_path' in dir():
   ilcsoft.use( Eigen( Eigen_path ) )

# end of configuration file
